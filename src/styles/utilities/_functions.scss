@use 'sass:math';

@function powerNumber($number, $exp) {
	$value: 1;
	@if $exp > 0 {
		@for $i from 1 through $exp {
			$value: $value * $number;
		}
	}
	@else if $exp < 0 {
		@for $i from 1 through -$exp {
			$value: divide($value, $number);
		}
	}
	@return $value;
}

@function tint($color, $percentage) {
		@return mix(white, $color, $percentage);
}

@function shade($color, $percentage) {
		@return mix(black, $color, $percentage);
}

@function findColorInvert($color) {
		@if (colorLuminance($color) > 0.55) {
				@return rgba(#000, 0.7);
		}
		@else {
				@return white;
		}
}

@function colorLuminance($color) {
	@if type-of($color) != 'color' {
		@return 0.55;
	}
	$color-rgb: ('red': red($color),'green': green($color),'blue': blue($color));
	@each $name, $value in $color-rgb {
		$adjusted: 0;
		$value: math.div($value, 255);
		@if $value < 0.03928 {
			$value: math.div($value, 12.92);
		}
		@else {
			$value: math.div(($value + .055), 1.055);
			$value: powerNumber($value, 2);
		}
		$color-rgb: map-merge($color-rgb, ($name: $value));
	}
	@return (map-get($color-rgb, 'red') * .2126) + (map-get($color-rgb, 'green') * .7152) + (map-get($color-rgb, 'blue') * .0722);
}

@function findLightColor($color, $l: 96%) {
	@if type-of($color) == 'color' {
	  $l: 96%;
	  @if lightness($color) > 96% {
		$l: lightness($color);
	  }
	  @return change-color($color, $lightness: $l);
	}
	@return white;
  }

  @function findDarkColor($color, $base-l: 29%) {
	@if type-of($color) == 'color' {
	  $luminance: colorLuminance($color);
	  $luminance-delta: (0.53 - $luminance);
	  $target-l: round($base-l + ($luminance-delta * 53));
	  @return change-color($color, $lightness: max($base-l, $target-l));
	}
	@return black;
  };
